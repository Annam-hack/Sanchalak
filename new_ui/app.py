import streamlit as st
import io
import base64
import json
import uuid
from streamlit.components.v1 import html
from utils import transcribe_audio, tts_response, audio_to_bytesio, autoplay_audio
import requests
import tempfile
import os
import time

# Configuration
SANCHALAK_API_BASE_URL = os.getenv("BACKEND_URL", "http://localhost:8000")

# Initialize session state variables
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

if "conversation_id" not in st.session_state:
    st.session_state.conversation_id = str(uuid.uuid4())

if "conversation_stage" not in st.session_state:
    st.session_state.conversation_stage = "greeting"

if "farmer_data" not in st.session_state:
    st.session_state.farmer_data = {}

if "first_visit" not in st.session_state:
    st.session_state.first_visit = True

if "selected_language" not in st.session_state:
    st.session_state.selected_language = "English"

# Page Configuration
st.set_page_config(
    page_title="Sanchalak - Government Scheme Eligibility Checker",
    page_icon="ЁЯПЫя╕П",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# Language options
language_options = {
    "English": "en",
    "Hindi (рд╣рд┐рдиреНрджреА)": "hi",
    "Gujarati (ркЧрлБркЬрк░рк╛ркдрлА)": "gu", 
    "Punjabi (рикрй░риЬри╛римрйА)": "pa",
    "Bengali (ржмрж╛ржВрж▓рж╛)": "bn",
    "Telugu (р░др▒Жр░▓р▒Бр░Чр▒Б)": "te",
    "Tamil (родрооро┐ро┤рпН)": "ta",
    "Malayalam (р┤ор┤▓р┤пр┤╛р┤│р┤В)": "ml",
    "Kannada (р▓Хр▓ир│Нр▓ир▓б)": "kn",
    "Odia (рмУрмбрм╝рм┐рмЖ)": "or"
}

# Multilingual content for government scheme checker
language_content = {
    "en": {
        "app_title": "ЁЯПЫя╕П Sanchalak - Government Scheme Eligibility Checker",
        "app_subtitle": "Your Digital Assistant for Agricultural Government Schemes",
        "language_header": "ЁЯМР Choose Your Language",
        "language_help": "Select your preferred language:",
        "chat_header": "ЁЯТм Scheme Eligibility Conversation",
        "input_placeholder": "Type your message here or use voice recording...",
        "record_btn": "ЁЯОЩя╕П Record Voice",
        "send_btn": "ЁЯУд Send",
        "clear_btn": "ЁЯз╣ Clear Chat",
        "you_label": "ЁЯСитАНЁЯМ╛ You:",
        "bot_label": "ЁЯПЫя╕П Sanchalak:",
        "processing": "ЁЯФД Processing your request...",
        "footer_text": "Supported Languages: English, Hindi, Gujarati, Punjabi, Bengali, Telugu, Tamil, Malayalam, Kannada, Odia",
        "system_greeting": "ЁЯЩП Namaste! I am Sanchalak, your government scheme assistant. I help farmers check eligibility for various agricultural schemes like PM-KISAN, Soil Health Card, Pradhan Mantri Fasal Bima Yojana, and more.\n\nTo get started, please tell me:\n1. Your name\n2. Your state and district\n3. Your farming details (land size, crops grown)\n\nYou can speak in your regional language or type your response."
    },
    "hi": {
        "app_title": "ЁЯПЫя╕П рд╕рдВрдЪрд╛рд▓рдХ - рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛ рдкрд╛рддреНрд░рддрд╛ рдЬрд╛рдВрдЪрдХрд░реНрддрд╛",
        "app_subtitle": "рдХреГрд╖рд┐ рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдУрдВ рдХреЗ рд▓рд┐рдП рдЖрдкрдХрд╛ рдбрд┐рдЬрд┐рдЯрд▓ рд╕рд╣рд╛рдпрдХ",
        "language_header": "ЁЯМР рдЕрдкрдиреА рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ",
        "language_help": "рдЕрдкрдиреА рдкрд╕рдВрджреАрджрд╛ рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ:",
        "chat_header": "ЁЯТм рдпреЛрдЬрдирд╛ рдкрд╛рддреНрд░рддрд╛ рдмрд╛рддрдЪреАрдд",
        "input_placeholder": "рдпрд╣рд╛рдБ рдЕрдкрдирд╛ рд╕рдВрджреЗрд╢ рдЯрд╛рдЗрдк рдХрд░реЗрдВ рдпрд╛ рдЖрд╡рд╛рдЬрд╝ рд░рд┐рдХреЙрд░реНрдбрд┐рдВрдЧ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ...",
        "record_btn": "ЁЯОЩя╕П рдЖрд╡рд╛рдЬрд╝ рд░рд┐рдХреЙрд░реНрдб рдХрд░реЗрдВ",
        "send_btn": "ЁЯУд рднреЗрдЬреЗрдВ",
        "clear_btn": "ЁЯз╣ рдЪреИрдЯ рд╕рд╛рдлрд╝ рдХрд░реЗрдВ",
        "you_label": "ЁЯСитАНЁЯМ╛ рдЖрдк:",
        "bot_label": "ЁЯПЫя╕П рд╕рдВрдЪрд╛рд▓рдХ:",
        "processing": "ЁЯФД рдЖрдкрдХреЗ рдЕрдиреБрд░реЛрдз рдХреЛ рд╕рдВрд╕рд╛рдзрд┐рдд рдХрд░ рд░рд╣реЗ рд╣реИрдВ...",
        "footer_text": "рд╕рдорд░реНрдерд┐рдд рднрд╛рд╖рд╛рдПрдВ: рдЕрдВрдЧреНрд░реЗрдЬреА, рд╣рд┐рдВрджреА, рдЧреБрдЬрд░рд╛рддреА, рдкрдВрдЬрд╛рдмреА, рдмрдВрдЧрд╛рд▓реА, рддреЗрд▓реБрдЧреБ, рддрдорд┐рд▓, рдорд▓рдпрд╛рд▓рдо, рдХрдиреНрдирдбрд╝, рдЙрдбрд╝рд┐рдпрд╛",
        "system_greeting": "ЁЯЩП рдирдорд╕реНрддреЗ! рдореИрдВ рд╕рдВрдЪрд╛рд▓рдХ рд╣реВрдБ, рдЖрдкрдХрд╛ рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛ рд╕рд╣рд╛рдпрдХред рдореИрдВ рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЛ рд╡рд┐рднрд┐рдиреНрди рдХреГрд╖рд┐ рдпреЛрдЬрдирд╛рдУрдВ рдЬреИрд╕реЗ рдкреАрдПрдо-рдХрд┐рд╕рд╛рди, рдореГрджрд╛ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХрд╛рд░реНрдб, рдкреНрд░рдзрд╛рдирдордВрддреНрд░реА рдлрд╕рд▓ рдмреАрдорд╛ рдпреЛрдЬрдирд╛ рдЖрджрд┐ рдХреЗ рд▓рд┐рдП рдкрд╛рддреНрд░рддрд╛ рдЬрд╛рдВрдЪрдиреЗ рдореЗрдВ рдорджрдж рдХрд░рддрд╛ рд╣реВрдБред\n\nрд╢реБрд░реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рдореБрдЭреЗ рдмрддрд╛рдПрдВ:\n1. рдЖрдкрдХрд╛ рдирд╛рдо\n2. рдЖрдкрдХрд╛ рд░рд╛рдЬреНрдп рдФрд░ рдЬрд┐рд▓рд╛\n3. рдЖрдкрдХреА рдЦреЗрддреА рдХрд╛ рд╡рд┐рд╡рд░рдг (рднреВрдорд┐ рдХрд╛ рдЖрдХрд╛рд░, рдЙрдЧрд╛рдИ рдЬрд╛рдиреЗ рд╡рд╛рд▓реА рдлрд╕рд▓реЗрдВ)\n\nрдЖрдк рдЕрдкрдиреА рдХреНрд╖реЗрддреНрд░реАрдп рднрд╛рд╖рд╛ рдореЗрдВ рдмреЛрд▓ рд╕рдХрддреЗ рд╣реИрдВ рдпрд╛ рдЕрдкрдирд╛ рдЙрддреНрддрд░ рдЯрд╛рдЗрдк рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред"
    },
    "gu": {
        "app_title": "ЁЯПЫя╕П рк╕ркВркЪрк╛рк▓ркХ - рк╕рк░ркХрк╛рк░рлА ркпрлЛркЬркирк╛ рккрк╛ркдрлНрк░ркдрк╛ ркдрккрк╛рк╕ркХрк░рлНркдрк╛",
        "app_subtitle": "ркХрлГрк╖рк┐ рк╕рк░ркХрк╛рк░рлА ркпрлЛркЬркирк╛ркУ ркорк╛ркЯрлЗ ркдркорк╛рк░рлЛ ркбрк┐ркЬрк┐ркЯрк▓ рк╕рк╣рк╛ркпркХ",
        "language_header": "ЁЯМР ркдркорк╛рк░рлА ркнрк╛рк╖рк╛ рккрк╕ркВркж ркХрк░рлЛ",
        "language_help": "ркдркорк╛рк░рлА рккрк╕ркВркжрлАркжрк╛ ркнрк╛рк╖рк╛ рккрк╕ркВркж ркХрк░рлЛ:",
        "chat_header": "ЁЯТм ркпрлЛркЬркирк╛ рккрк╛ркдрлНрк░ркдрк╛ рк╡рк╛ркдркЪрлАркд",
        "input_placeholder": "ркЕрк╣рлАркВ ркдркорк╛рк░рлЛ рк╕ркВркжрлЗрк╢ ркЯрк╛ркЗркк ркХрк░рлЛ ркЕркерк╡рк╛ рк╡рлЙркЗрк╕ рк░рлЗркХрлЛрк░рлНркбрк┐ркВркЧркирлЛ ркЙрккркпрлЛркЧ ркХрк░рлЛ...",
        "record_btn": "ЁЯОЩя╕П ркЕрк╡рк╛ркЬ рк░рлЗркХрлЛрк░рлНркб ркХрк░рлЛ",
        "send_btn": "ЁЯУд ркорлЛркХрк▓рлЛ",
        "clear_btn": "ЁЯз╣ ркЪрлЗркЯ рк╕рк╛ркл ркХрк░рлЛ",
        "you_label": "ЁЯСитАНЁЯМ╛ ркдркорлЗ:",
        "bot_label": "ЁЯПЫя╕П рк╕ркВркЪрк╛рк▓ркХ:",
        "processing": "ЁЯФД ркдркорк╛рк░рлА рк╡рк┐ркиркВркдрлА рккрк░ ркХрк╛рко ркХрк░рлА рк░рк╣рлНркпрк╛ ркЫрлАркП...",
        "footer_text": "рк╕рккрлЛрк░рлНркЯрлЗркб ркнрк╛рк╖рк╛ркУ: ркЕркВркЧрлНрк░рлЗркЬрлА, рк╣рк┐ркирлНркжрлА, ркЧрлБркЬрк░рк╛ркдрлА, рккркВркЬрк╛ркмрлА, ркмркВркЧрк╛рк│рлА, ркдрлЗрк▓рлБркЧрлБ, ркдркорк┐рк▓, ркорк▓ркпрк╛рк▓рко, ркХркирлНркиркб, ркУркбрк┐ркпрк╛",
        "system_greeting": "ЁЯЩП ркиркорк╕рлНркдрлЗ! рк╣рлБркВ рк╕ркВркЪрк╛рк▓ркХ ркЫрлБркВ, ркдркорк╛рк░рлЛ рк╕рк░ркХрк╛рк░рлА ркпрлЛркЬркирк╛ рк╕рк╣рк╛ркпркХ. рк╣рлБркВ ркЦрлЗркбрлВркдрлЛркирлЗ PM-KISAN, ркорк╛ркЯрлА ркЖрк░рлЛркЧрлНркп ркХрк╛рк░рлНркб, рккрлНрк░ркзрк╛ркиркоркВркдрлНрк░рлА рклрк╕рк▓ рк╡рлАркорк╛ ркпрлЛркЬркирк╛ ркЬрлЗрк╡рлА рк╡рк┐рк╡рк┐ркз ркХрлГрк╖рк┐ ркпрлЛркЬркирк╛ркУ ркорк╛ркЯрлЗ рккрк╛ркдрлНрк░ркдрк╛ ркдрккрк╛рк╕рк╡рк╛ркорк╛ркВ ркоркжркж ркХрк░рлБркВ ркЫрлБркВ.\n\nрк╢рк░рлВ ркХрк░рк╡рк╛ ркорк╛ркЯрлЗ, ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркоркирлЗ ркХрк╣рлЛ:\n1. ркдркорк╛рк░рлБркВ ркирк╛рко\n2. ркдркорк╛рк░рлБркВ рк░рк╛ркЬрлНркп ркЕркирлЗ ркЬрк┐рк▓рлНрк▓рлЛ\n3. ркдркорк╛рк░рлА ркЦрлЗркдрлАркирлА рк╡рк┐ркЧркдрлЛ (ркЬркорлАркиркирлБркВ ркХркж, ркЙркЧрк╛ркбрлЗрк▓рк╛ рккрк╛ркХрлЛ)\n\nркдркорлЗ ркдркорк╛рк░рлА рккрлНрк░рк╛ркжрлЗрк╢рк┐ркХ ркнрк╛рк╖рк╛ркорк╛ркВ ркмрлЛрк▓рлА рк╢ркХрлЛ ркЫрлЛ ркЕркерк╡рк╛ ркдркорк╛рк░рлЛ ркЬрк╡рк╛ркм ркЯрк╛ркЗркк ркХрк░рлА рк╢ркХрлЛ ркЫрлЛ."
    }
}

# Enhanced Agricultural Theme CSS
st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');
    
    /* Root variables for agricultural government theme */
    :root {
        --primary-green: #2E7D32;
        --secondary-green: #4CAF50;
        --accent-green: #66BB6A;
        --light-green: #C8E6C9;
        --government-blue: #1976D2;
        --scheme-gold: #FFB300;
        --earth-brown: #8D6E63;
        --official-red: #D32F2F;
    }
    
    /* Main app styling */
    .main {
        padding: 1rem;
        background: linear-gradient(135deg, #E8F5E8 0%, #F1F8E9 50%, #E3F2FD 100%);
        min-height: 100vh;
        font-family: 'Poppins', sans-serif;
    }
    
    .stApp {
        background: linear-gradient(135deg, #E8F5E8 0%, #F1F8E9 50%, #E3F2FD 100%);
        font-family: 'Poppins', sans-serif;
    }
    
    /* Header styling */
    .header-container {
        background: linear-gradient(135deg, var(--government-blue) 0%, var(--primary-green) 100%);
        color: white;
        padding: 2.5rem;
        border-radius: 20px;
        text-align: center;
        margin-bottom: 2rem;
        box-shadow: 0 10px 30px rgba(25, 118, 210, 0.4);
        position: relative;
        overflow: hidden;
    }
    
    .header-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }
    
    .header-subtitle {
        font-size: 1.2rem;
        opacity: 0.95;
        font-weight: 300;
    }
    
    /* Chat container */
    .chat-container {
        background: white;
        border-radius: 20px;
        padding: 1.5rem;
        margin: 1.5rem 0;
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        border: 2px solid var(--light-green);
        max-height: 500px;
        overflow-y: auto;
    }
    
    /* Chat messages */
    .chat-message {
        margin: 1rem 0;
        padding: 1rem;
        border-radius: 15px;
        animation: slideIn 0.3s ease-out;
    }
    
    @keyframes slideIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .user-message {
        background: linear-gradient(135deg, #E3F2FD 0%, #BBDEFB 100%);
        border-left: 4px solid var(--government-blue);
        margin-left: 2rem;
    }
    
    .bot-message {
        background: linear-gradient(135deg, #F1F8E9 0%, #DCEDC8 100%);
        border-left: 4px solid var(--secondary-green);
        margin-right: 2rem;
    }
    
    .system-message {
        background: linear-gradient(135deg, #FFF8E1 0%, #FFECB3 100%);
        border-left: 4px solid var(--scheme-gold);
        text-align: center;
        margin: 1rem 0;
    }
    
    /* Input area */
    .input-container {
        background: white;
        border-radius: 25px;
        padding: 1rem;
        margin: 1rem 0;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        border: 2px solid var(--light-green);
        display: flex;
        gap: 1rem;
        align-items: center;
    }
    
    .chat-input {
        flex: 1;
        border: none;
        outline: none;
        font-size: 1rem;
        padding: 0.5rem;
        font-family: 'Poppins', sans-serif;
    }
    
    .input-controls {
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }
    
    .control-btn {
        background: linear-gradient(135deg, var(--secondary-green) 0%, var(--accent-green) 100%);
        border: none;
        border-radius: 50%;
        width: 45px;
        height: 45px;
        color: white;
        font-size: 1.1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
    }
    
    .control-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(76, 175, 80, 0.4);
    }
    
    .recording-btn {
        background: linear-gradient(135deg, #E53935 0%, #C62828 100%) !important;
        animation: recordingPulse 1.5s ease-in-out infinite;
    }
    
    @keyframes recordingPulse {
        0%, 100% { box-shadow: 0 4px 15px rgba(229, 57, 53, 0.3); }
        50% { box-shadow: 0 4px 25px rgba(229, 57, 53, 0.6); }
    }
    
    .processing-btn {
        background: linear-gradient(135deg, var(--scheme-gold) 0%, #FF8F00 100%) !important;
        animation: processingRotate 2s linear infinite;
    }
    
    @keyframes processingRotate {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
    }
    
    /* Language selection */
    .language-selection {
        background: white;
        border-radius: 15px;
        padding: 1.5rem;
        margin: 1rem 0;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        border: 2px solid var(--light-green);
    }
    
    /* Section headers */
    .section-header {
        background: linear-gradient(135deg, var(--secondary-green) 0%, var(--accent-green) 100%);
        color: white;
        padding: 1rem;
        border-radius: 15px;
        font-size: 1.3rem;
        font-weight: 600;
        text-align: center;
        margin: 1rem 0;
        box-shadow: 0 6px 20px rgba(76, 175, 80, 0.3);
    }
    
    /* Footer */
    .footer {
        background: linear-gradient(135deg, var(--primary-green) 0%, var(--government-blue) 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 15px;
        text-align: center;
        margin-top: 2rem;
        font-size: 0.9rem;
        opacity: 0.9;
    }
    
    /* Buttons */
    .stButton > button {
        width: 100%;
        background: linear-gradient(135deg, var(--secondary-green) 0%, var(--accent-green) 100%);
        color: white;
        border: none;
        border-radius: 15px;
        padding: 0.8rem;
        font-weight: 600;
        font-size: 1rem;
        transition: all 0.3s ease;
        font-family: 'Poppins', sans-serif;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(76, 175, 80, 0.4);
    }
    
    /* Hide Streamlit elements */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    header {visibility: hidden;}
    
    /* Recording status */
    .recording-status {
        background: linear-gradient(135deg, #FFEBEE 0%, #FFCDD2 100%);
        color: #C62828;
        padding: 0.8rem;
        border-radius: 10px;
        text-align: center;
        margin: 0.5rem 0;
        border: 2px solid #E57373;
        animation: statusGlow 2s ease-in-out infinite;
    }
    
    @keyframes statusGlow {
        0%, 100% { box-shadow: 0 0 10px rgba(229, 57, 53, 0.2); }
        50% { box-shadow: 0 0 20px rgba(229, 57, 53, 0.4); }
    }
    </style>
""", unsafe_allow_html=True)

# Voice recorder with better error handling
def voice_recorder_component():
    return """
    <div id="voiceRecorder" style="display: flex; align-items: center; justify-content: center; height: 45px;">
        <button id="recordButton" onclick="toggleRecording()" 
                style="background: linear-gradient(135deg, #4CAF50 0%, #66BB6A 100%); 
                       color: white; border: none; border-radius: 50%; 
                       width: 45px; height: 45px; font-size: 1.2rem; 
                       cursor: pointer; box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
                       transition: all 0.3s ease; display: flex; align-items: center; justify-content: center;">
            ЁЯОЩя╕П
        </button>
    </div>
    
    <script>
    let mediaRecorder;
    let audioChunks = [];
    let isRecording = false;
    let recordingTimer;
    let recordingSeconds = 0;
    
    function updateStatus(message, isRecording = false) {
        const button = document.getElementById('recordButton');
        
        if (isRecording) {
            button.style.background = 'linear-gradient(135deg, #E53935 0%, #C62828 100%)';
            button.style.animation = 'recordingPulse 1.5s ease-in-out infinite';
            button.textContent = 'тП╣я╕П';
        } else {
            button.style.background = 'linear-gradient(135deg, #4CAF50 0%, #66BB6A 100%)';
            button.style.animation = 'none';
            button.textContent = 'ЁЯОЩя╕П';
        }
    }
    
    // Add CSS animation
    if (!document.getElementById('recordingStyles')) {
        const style = document.createElement('style');
        style.id = 'recordingStyles';
        style.textContent = `
            @keyframes recordingPulse {
                0%, 100% { box-shadow: 0 4px 15px rgba(229, 57, 53, 0.3); }
                50% { box-shadow: 0 4px 25px rgba(229, 57, 53, 0.6); }
            }
        `;
        document.head.appendChild(style);
    }
    
    async function startRecording() {
        try {
            if (isRecording) return;
            
            const stream = await navigator.mediaDevices.getUserMedia({ 
                audio: {
                    echoCancellation: true,
                    noiseSuppression: true,
                    sampleRate: 16000
                } 
            });
            
            // Check for supported MIME types
            let mimeType = 'audio/webm;codecs=opus';
            if (!MediaRecorder.isTypeSupported(mimeType)) {
                mimeType = 'audio/webm';
                if (!MediaRecorder.isTypeSupported(mimeType)) {
                    mimeType = 'audio/mp4';
                    if (!MediaRecorder.isTypeSupported(mimeType)) {
                        mimeType = '';
                    }
                }
            }
            
            const options = mimeType ? { mimeType } : {};
            mediaRecorder = new MediaRecorder(stream, options);
            
            audioChunks = [];
            isRecording = true;
            recordingSeconds = 0;
            
            // Start timer
            recordingTimer = setInterval(() => {
                recordingSeconds++;
            }, 1000);
            
            updateStatus('', true);
            
            mediaRecorder.ondataavailable = event => {
                if (event.data.size > 0) {
                    audioChunks.push(event.data);
                }
            };
            
            mediaRecorder.onstop = async () => {
                clearInterval(recordingTimer);
                
                const blob = new Blob(audioChunks, { type: mediaRecorder.mimeType || 'audio/webm' });
                const arrayBuffer = await blob.arrayBuffer();
                const base64 = btoa(String.fromCharCode(...new Uint8Array(arrayBuffer)));
                
                // Send to Streamlit using the component API
                Streamlit.setComponentValue({
                    audio_data: base64,
                    action: 'audio_recorded',
                    duration: recordingSeconds,
                    mimeType: mediaRecorder.mimeType
                });
                
                // Stop all tracks
                stream.getTracks().forEach(track => track.stop());
                isRecording = false;
                updateStatus('', false);
            };
            
            mediaRecorder.onerror = (event) => {
                console.error('MediaRecorder error:', event.error);
                updateStatus('тЭМ Recording error', false);
                stopRecording();
            };
            
            mediaRecorder.start();
            
            // Auto-stop after 60 seconds
            setTimeout(() => {
                if (mediaRecorder && mediaRecorder.state === 'recording') {
                    stopRecording();
                }
            }, 60000);
            
        } catch (error) {
            console.error('Recording error:', error);
            isRecording = false;
            updateStatus('', false);
        }
    }
    
    function stopRecording() {
        if (mediaRecorder && isRecording && mediaRecorder.state !== 'inactive') {
            mediaRecorder.stop();
        }
    }
    
    function toggleRecording() {
        if (isRecording) {
            stopRecording();
        } else {
            startRecording();
        }
    }
    
    // Expose to global scope for external access
    window.startRecording = startRecording;
    window.stopRecording = stopRecording;
    window.toggleRecording = toggleRecording;
    </script>
    """

# Get current language content
selected_lang_code = language_options[st.session_state.selected_language]
current_content = language_content.get(selected_lang_code, language_content["en"])

# Header
st.markdown(f"""
    <div class="header-container">
        <div class="header-title">{current_content["app_title"]}</div>
        <p class="header-subtitle">{current_content["app_subtitle"]}</p>
    </div>
""", unsafe_allow_html=True)

# Language Selection
with st.container():
    st.markdown('<div class="language-selection">', unsafe_allow_html=True)
    st.markdown(f'<div class="section-header">{current_content["language_header"]}</div>', unsafe_allow_html=True)
    
    language_label = st.selectbox(
        current_content["language_help"],
        list(language_options.keys()),
        index=list(language_options.keys()).index(st.session_state.selected_language),
        key="language_selector"
    )
    
    # Update selected language and reset chat if changed
    if language_label != st.session_state.selected_language:
        st.session_state.selected_language = language_label
        st.session_state.chat_history = []
        st.session_state.conversation_stage = "greeting"
        st.session_state.farmer_data = {}
        st.rerun()
    
    st.markdown('</div>', unsafe_allow_html=True)

# Update current content after language change
selected_lang_code = language_options[st.session_state.selected_language]
current_content = language_content.get(selected_lang_code, language_content["en"])

# Initialize conversation with system greeting - always show in current language
if not st.session_state.chat_history:
    st.session_state.chat_history.append(("system", current_content["system_greeting"]))
elif st.session_state.chat_history and st.session_state.chat_history[0][0] == "system":
    # Update the first system message with current language
    st.session_state.chat_history[0] = ("system", current_content["system_greeting"])

# Chat Display
if st.session_state.chat_history:
    st.markdown('<div class="chat-container">', unsafe_allow_html=True)
    st.markdown(f'<div class="section-header">{current_content["chat_header"]}</div>', unsafe_allow_html=True)
    
    for sender, message in st.session_state.chat_history:
        if sender == "user":
            st.markdown(f"""
                <div class="chat-message user-message">
                    <strong>{current_content["you_label"]}</strong> {message}
                </div>
            """, unsafe_allow_html=True)
        elif sender == "system":
            st.markdown(f"""
                <div class="chat-message system-message">
                    <strong>{current_content["bot_label"]}</strong> {message}
                </div>
            """, unsafe_allow_html=True)
        else:  # bot
            if message.startswith("AUDIO::"):
                parts = message.split("::")
                audio_path = parts[1] if len(parts) > 1 else ""
                response_text = parts[2] if len(parts) > 2 else "Audio response"
                
                st.markdown(f"""
                    <div class="chat-message bot-message">
                        <strong>{current_content["bot_label"]}</strong> {response_text}
                    </div>
                """, unsafe_allow_html=True)
                
                if audio_path:
                    audio_html = autoplay_audio(audio_path)
                    st.markdown(audio_html, unsafe_allow_html=True)
            else:
                st.markdown(f"""
                    <div class="chat-message bot-message">
                        <strong>{current_content["bot_label"]}</strong> {message}
                    </div>
                """, unsafe_allow_html=True)
    
    st.markdown('</div>', unsafe_allow_html=True)

# Input Area
st.markdown('<div class="input-container">', unsafe_allow_html=True)

# Create columns for input
col1, col2, col3 = st.columns([7, 1, 1])

with col1:
    user_input = st.text_input(
        "Input Message",
        placeholder=current_content["input_placeholder"],
        key="user_text_input",
        label_visibility="collapsed"
    )

with col2:
    # Combined voice recorder and button
    recorder_component = html(voice_recorder_component(), height=50)
    
    # Handle audio data from recorder component
    if recorder_component and isinstance(recorder_component, dict):
        if recorder_component.get("action") == "audio_recorded":
            audio_data = recorder_component.get("audio_data")
            if audio_data:
                try:
                    # Decode base64 audio data
                    audio_bytes = base64.b64decode(audio_data)
                    audio_io = io.BytesIO(audio_bytes)
                    
                    with st.spinner(current_content["processing"]):
                        # Convert to proper format
                        processed_audio = audio_to_bytesio(audio_io)
                        
                        if processed_audio:
                            # Transcribe audio
                            transcription_result = transcribe_audio(processed_audio)
                            
                            if transcription_result.get("status") == "COMPLETED":
                                transcribed_text = transcription_result.get("transcribed_text", "")
                                
                                # Add to chat history
                                st.session_state.chat_history.append(("user", f"ЁЯО╡ {transcribed_text}"))
                                
                                # Process the transcribed message
                                response = process_user_message(transcribed_text, selected_lang_code)
                                
                                # Generate TTS response
                                tts_result = tts_response(response, selected_lang_code)
                                
                                if tts_result.get("status") == "COMPLETED":
                                    audio_filename = tts_result.get("audio_path", "")
                                    st.session_state.chat_history.append(("bot", f"AUDIO::{audio_filename}::{response}"))
                                else:
                                    st.session_state.chat_history.append(("bot", response))
                                
                                st.rerun()
                            else:
                                st.error("Failed to transcribe audio. Please try again.")
                        else:
                            st.error("Failed to process audio. Please try again.")
                            
                except Exception as e:
                    st.error(f"Error processing voice recording: {str(e)}")

with col3:
    # Combined Send and Clear buttons
    send_clicked = st.button("ЁЯУд", key="send_btn", help=current_content["send_btn"])
    
    if st.button("ЁЯз╣", key="clear_btn", help=current_content["clear_btn"]):
        st.session_state.chat_history = []
        st.session_state.conversation_stage = "greeting"
        st.session_state.farmer_data = {}
        st.session_state.chat_history.append(("system", current_content["system_greeting"]))
        st.rerun()

st.markdown('</div>', unsafe_allow_html=True)

# Conversation flow logic
def process_user_message(message, language_code):
    """Process user message and generate appropriate response based on conversation stage"""
    
    # Simple keyword-based processing for demonstration
    # In production, this would integrate with your backend API
    
    stage = st.session_state.conversation_stage
    farmer_data = st.session_state.farmer_data
    
    if stage == "greeting" or "name" not in farmer_data:
        # Extract name
        if any(word in message.lower() for word in ["my name is", "i am", "naam", "рдореЗрд░рд╛ рдирд╛рдо", "ркорк╛рк░рлБркВ ркирк╛рко"]):
            # Extract name (simplified)
            name = message.split()[-1] if message.split() else "Farmer"
            farmer_data["name"] = name
            st.session_state.conversation_stage = "location"
            
            if language_code == "hi":
                return f"рдзрдиреНрдпрд╡рд╛рдж {name} рдЬреА! рдЕрдм рдХреГрдкрдпрд╛ рдореБрдЭреЗ рдЕрдкрдирд╛ рд░рд╛рдЬреНрдп рдФрд░ рдЬрд┐рд▓рд╛ рдмрддрд╛рдПрдВред рдЙрджрд╛рд╣рд░рдг: рдореИрдВ рдЧреБрдЬрд░рд╛рдд рдХреЗ рдЕрд╣рдорджрд╛рдмрд╛рдж рдЬрд┐рд▓реЗ рд╕реЗ рд╣реВрдВред"
            elif language_code == "gu":
                return f"ркЖркнрк╛рк░ {name} ркЬрлА! рк╣рк╡рлЗ ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркоркирлЗ ркдркорк╛рк░рлБркВ рк░рк╛ркЬрлНркп ркЕркирлЗ ркЬрк┐рк▓рлНрк▓рлЛ ркХрк╣рлЛред ркЙркжрк╛рк╣рк░ркг: рк╣рлБркВ ркЧрлБркЬрк░рк╛ркдркирк╛ ркЕркоркжрк╛рк╡рк╛ркж ркЬрк┐рк▓рлНрк▓рк╛ркерлА ркЫрлБркВред"
            else:
                return f"Thank you {name}! Now please tell me your state and district. For example: I am from Ahmedabad district in Gujarat."
        else:
            if language_code == "hi":
                return "рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдирд╛рдо рдмрддрд╛рдПрдВред рдЙрджрд╛рд╣рд░рдг: рдореЗрд░рд╛ рдирд╛рдо рд░рд╛рдо рд╣реИред"
            elif language_code == "gu":
                return "ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркдркорк╛рк░рлБркВ ркирк╛рко ркХрк╣рлЛ. ркЙркжрк╛рк╣рк░ркг: ркорк╛рк░рлБркВ ркирк╛рко рк░рк╛рко ркЫрлЗ."
            else:
                return "Please tell me your name. For example: My name is Ram."
    
    elif stage == "location":
        # Extract location
        farmer_data["location"] = message
        st.session_state.conversation_stage = "farming_details"
        
        if language_code == "hi":
            return f"рдмрд╣реБрдд рдЕрдЪреНрдЫрд╛! рдЕрдм рдХреГрдкрдпрд╛ рдЕрдкрдиреА рдЦреЗрддреА рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдмрддрд╛рдПрдВ:\nтАв рдЖрдкрдХреЗ рдкрд╛рд╕ рдХрд┐рддрдиреА рдЬрдореАрди рд╣реИ?\nтАв рдЖрдк рдХреМрди рд╕реА рдлрд╕рд▓реЗрдВ рдЙрдЧрд╛рддреЗ рд╣реИрдВ?\nтАв рдХреНрдпрд╛ рдЖрдк рдХрд┐рд╕рд╛рди рд╣реИрдВ рдпрд╛ рдЦреЗрддрд┐рд╣рд░ рдордЬрджреВрд░?"
        elif language_code == "gu":
            return f"ркЦрлВркм рк╕рк░рк╕! рк╣рк╡рлЗ ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркдркорк╛рк░рлА ркЦрлЗркдрлА рк╡рк┐рк╢рлЗ ркХрк╣рлЛ:\nтАв ркдркорк╛рк░рлА рккрк╛рк╕рлЗ ркХрлЗркЯрк▓рлА ркЬркорлАрки ркЫрлЗ?\nтАв ркдркорлЗ ркХркпрк╛ рккрк╛ркХрлЛ ркЙркЧрк╛ркбрлЛ ркЫрлЛ?\nтАв рк╢рлБркВ ркдркорлЗ ркЦрлЗркбрлВркд ркЫрлЛ ркХрлЗ ркЦрлЗркдрлА ркоркЬрлВрк░?"
        else:
            return f"Great! Now please tell me about your farming:\nтАв How much land do you own?\nтАв What crops do you grow?\nтАв Are you a farmer or agricultural laborer?"
    
    elif stage == "farming_details":
        # Extract farming details
        farmer_data["farming_details"] = message
        st.session_state.conversation_stage = "eligibility_check"
        
        # Generate scheme eligibility based on collected data
        eligible_schemes = []
        
        # Simple eligibility logic (in production, this would be more sophisticated)
        if "land" in message.lower() or "acre" in message.lower() or "hectare" in message.lower():
            eligible_schemes.extend(["PM-KISAN", "Soil Health Card"])
        
        if "crop" in message.lower() or "farming" in message.lower():
            eligible_schemes.extend(["Pradhan Mantri Fasal Bima Yojana", "Kisan Credit Card"])
        
        if not eligible_schemes:
            eligible_schemes = ["PM-KISAN", "Soil Health Card"]  # Default schemes
        
        farmer_data["eligible_schemes"] = eligible_schemes
        
        if language_code == "hi":
            schemes_text = ", ".join(eligible_schemes)
            return f"рдЖрдкрдХреА рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рдЖрдзрд╛рд░ рдкрд░, рдЖрдк рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рдпреЛрдЬрдирд╛рдУрдВ рдХреЗ рд▓рд┐рдП рдкрд╛рддреНрд░ рд╣реЛ рд╕рдХрддреЗ рд╣реИрдВ:\n\nЁЯМ╛ {schemes_text}\n\nрдХреНрдпрд╛ рдЖрдк рдХрд┐рд╕реА рд╡рд┐рд╢реЗрд╖ рдпреЛрдЬрдирд╛ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдФрд░ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?"
        elif language_code == "gu":
            schemes_text = ", ".join(eligible_schemes)
            return f"ркдркорк╛рк░рлА ркорк╛рк╣рк┐ркдрлАркирк╛ ркЖркзрк╛рк░рлЗ, ркдркорлЗ ркирлАркЪрлЗркирлА ркпрлЛркЬркирк╛ркУ ркорк╛ркЯрлЗ рккрк╛ркдрлНрк░ рк╣рлЛркИ рк╢ркХрлЛ ркЫрлЛ:\n\nЁЯМ╛ {schemes_text}\n\nрк╢рлБркВ ркдркорлЗ ркХрлЛркИ ркЦрк╛рк╕ ркпрлЛркЬркирк╛ рк╡рк┐рк╢рлЗ рк╡ркзрлБ ркЬрк╛ркгрк╡рк╛ ркорк╛ркВркЧрлЛ ркЫрлЛ?"
        else:
            schemes_text = ", ".join(eligible_schemes)
            return f"Based on your information, you may be eligible for the following schemes:\n\nЁЯМ╛ {schemes_text}\n\nWould you like to know more about any specific scheme?"
    
    else:
        # General conversation
        if language_code == "hi":
            return "рдореИрдВ рдЖрдкрдХреА рдорджрдж рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдБ рд╣реВрдБред рдХреНрдпрд╛ рдЖрдк рдХрд┐рд╕реА рд╡рд┐рд╢реЗрд╖ рдпреЛрдЬрдирд╛ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ рдпрд╛ рдирдИ рдЬрд╛рдирдХрд╛рд░реА рджреЗрдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?"
        elif language_code == "gu":
            return "рк╣рлБркВ ркдркорк╛рк░рлА ркоркжркж ркХрк░рк╡рк╛ ркорк╛ркЯрлЗ ркЕрк╣рлАркВ ркЫрлБркВ. рк╢рлБркВ ркдркорлЗ ркХрлЛркИ ркЦрк╛рк╕ ркпрлЛркЬркирк╛ рк╡рк┐рк╢рлЗ ркЬрк╛ркгрк╡рк╛ ркорк╛ркВркЧрлЛ ркЫрлЛ ркХрлЗ ркирк╡рлА ркорк╛рк╣рк┐ркдрлА ркЖрккрк╡рк╛ ркорк╛ркВркЧрлЛ ркЫрлЛ?"
        else:
            return "I'm here to help you. Would you like to know about any specific scheme or provide new information?"

# Handle text input
if send_clicked and user_input.strip():
    # Add user message to chat
    st.session_state.chat_history.append(("user", user_input))
    
    # Process the message with conversation flow
    response = process_user_message(user_input, selected_lang_code)
    
    # Generate TTS response if backend is available
    tts_result = tts_response(response, selected_lang_code)
    
    if tts_result.get("status") == "COMPLETED":
        audio_filename = tts_result.get("audio_path", "")
        st.session_state.chat_history.append(("bot", f"AUDIO::{audio_filename}::{response}"))
    else:
        st.session_state.chat_history.append(("bot", response))
    
    # Clear input and rerun
    st.rerun()

# Handle audio recording (this would be triggered by the JavaScript component)
# The component will send audio data that can be processed here

# Process uploaded audio files
uploaded_audio = st.file_uploader(
    "Or upload an audio file:",
    type=['wav', 'mp3', 'm4a', 'webm'],
    key="audio_uploader",
    help="Upload an audio file instead of recording"
)

if uploaded_audio:
    with st.spinner(current_content["processing"]):
        # Convert audio to BytesIO
        audio_data = audio_to_bytesio(uploaded_audio)
        
        if audio_data:
            # Transcribe audio
            transcription_result = transcribe_audio(audio_data)
            
            if transcription_result.get("status") == "COMPLETED":
                transcribed_text = transcription_result.get("transcribed_text", "")
                
                # Add to chat history
                st.session_state.chat_history.append(("user", f"ЁЯО╡ Audio: {transcribed_text}"))
                
                # Generate response (this would be your scheme checking logic)
                response = f"I heard: '{transcribed_text}'. Processing for scheme eligibility..."
                
                # Generate TTS response
                tts_result = tts_response(response, selected_lang_code)
                
                if tts_result.get("status") == "COMPLETED":
                    audio_filename = tts_result.get("audio_path", "")
                    st.session_state.chat_history.append(("bot", f"AUDIO::{audio_filename}::{response}"))
                else:
                    st.session_state.chat_history.append(("bot", response))
                
                st.rerun()
            else:
                st.error("Failed to transcribe audio. Please try again.")

# Footer with comprehensive information
footer_content = {
    "en": {
        "title": "ЁЯПЫя╕П Sanchalak - Government Scheme Eligibility Checker",
        "description": "Empowering farmers with easy access to agricultural government schemes",
        "schemes": "Supported Schemes: PM-KISAN, Soil Health Card, Pradhan Mantri Fasal Bima Yojana, Kisan Credit Card",
        "languages": "Supported Languages: English, Hindi, Gujarati, Punjabi, Bengali, Telugu, Tamil, Malayalam, Kannada, Odia",
        "disclaimer": "This is a demo application. For official scheme applications, please visit your nearest agricultural office or official government websites.",
        "privacy": "Your conversations are not stored permanently. Voice data is processed securely."
    },
    "hi": {
        "title": "ЁЯПЫя╕П рд╕рдВрдЪрд╛рд▓рдХ - рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛ рдкрд╛рддреНрд░рддрд╛ рдЬрд╛рдВрдЪрдХрд░реНрддрд╛",
        "description": "рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЛ рдХреГрд╖рд┐ рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдУрдВ рддрдХ рдЖрд╕рд╛рди рдкрд╣реБрдВрдЪ рдкреНрд░рджрд╛рди рдХрд░рдирд╛",
        "schemes": "рд╕рдорд░реНрдерд┐рдд рдпреЛрдЬрдирд╛рдПрдВ: рдкреАрдПрдо-рдХрд┐рд╕рд╛рди, рдореГрджрд╛ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХрд╛рд░реНрдб, рдкреНрд░рдзрд╛рдирдордВрддреНрд░реА рдлрд╕рд▓ рдмреАрдорд╛ рдпреЛрдЬрдирд╛, рдХрд┐рд╕рд╛рди рдХреНрд░реЗрдбрд┐рдЯ рдХрд╛рд░реНрдб",
        "languages": "рд╕рдорд░реНрдерд┐рдд рднрд╛рд╖рд╛рдПрдВ: рдЕрдВрдЧреНрд░реЗрдЬреА, рд╣рд┐рдВрджреА, рдЧреБрдЬрд░рд╛рддреА, рдкрдВрдЬрд╛рдмреА, рдмрдВрдЧрд╛рд▓реА, рддреЗрд▓реБрдЧреБ, рддрдорд┐рд▓, рдорд▓рдпрд╛рд▓рдо, рдХрдиреНрдирдбрд╝, рдЙрдбрд╝рд┐рдпрд╛",
        "disclaimer": "рдпрд╣ рдПрдХ рдбреЗрдореЛ рдПрдкреНрд▓рд┐рдХреЗрд╢рди рд╣реИред рдЖрдзрд┐рдХрд╛рд░рд┐рдХ рдпреЛрдЬрдирд╛ рдЖрд╡реЗрджрди рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рдЕрдкрдиреЗ рдирд┐рдХрдЯрддрдо рдХреГрд╖рд┐ рдХрд╛рд░реНрдпрд╛рд▓рдп рдпрд╛ рдЖрдзрд┐рдХрд╛рд░рд┐рдХ рд╕рд░рдХрд╛рд░реА рд╡реЗрдмрд╕рд╛рдЗрдЯреЛрдВ рдкрд░ рдЬрд╛рдПрдВред",
        "privacy": "рдЖрдкрдХреА рдмрд╛рддрдЪреАрдд рд╕реНрдерд╛рдпреА рд░реВрдк рд╕реЗ рд╕рдВрдЧреНрд░рд╣реАрдд рдирд╣реАрдВ рд╣реЛрддреАред рд╡реЙрдпрд╕ рдбреЗрдЯрд╛ рд╕реБрд░рдХреНрд╖рд┐рдд рд░реВрдк рд╕реЗ рд╕рдВрд╕рд╛рдзрд┐рдд рд╣реЛрддрд╛ рд╣реИред"
    },
    "gu": {
        "title": "ЁЯПЫя╕П рк╕ркВркЪрк╛рк▓ркХ - рк╕рк░ркХрк╛рк░рлА ркпрлЛркЬркирк╛ рккрк╛ркдрлНрк░ркдрк╛ ркдрккрк╛рк╕ркХрк░рлНркдрк╛",
        "description": "ркЦрлЗркбрлВркдрлЛркирлЗ ркХрлГрк╖рк┐ рк╕рк░ркХрк╛рк░рлА ркпрлЛркЬркирк╛ркУркирлА рк╕рк░рк│ рккрк╣рлЛркВркЪ рккрлНрк░ркжрк╛рки ркХрк░рк╡рлА",
        "schemes": "рк╕рккрлЛрк░рлНркЯрлЗркб ркпрлЛркЬркирк╛ркУ: PM-KISAN, ркорк╛ркЯрлА ркЖрк░рлЛркЧрлНркп ркХрк╛рк░рлНркб, рккрлНрк░ркзрк╛ркиркоркВркдрлНрк░рлА рклрк╕рк▓ рк╡рлАркорк╛ ркпрлЛркЬркирк╛, ркХрк┐рк╕рк╛рки ркХрлНрк░рлЗркбрк┐ркЯ ркХрк╛рк░рлНркб",
        "languages": "рк╕рккрлЛрк░рлНркЯрлЗркб ркнрк╛рк╖рк╛ркУ: ркЕркВркЧрлНрк░рлЗркЬрлА, рк╣рк┐ркирлНркжрлА, ркЧрлБркЬрк░рк╛ркдрлА, рккркВркЬрк╛ркмрлА, ркмркВркЧрк╛рк│рлА, ркдрлЗрк▓рлБркЧрлБ, ркдркорк┐рк▓, ркорк▓ркпрк╛рк▓рко, ркХркирлНркиркб, ркУркбрк┐ркпрк╛",
        "disclaimer": "ркЖ ркПркХ ркбрлЗркорлЛ ркПрккрлНрк▓рк┐ркХрлЗрк╢рки ркЫрлЗ. рк╕ркдрлНркдрк╛рк╡рк╛рк░ ркпрлЛркЬркирк╛ ркЕрк░ркЬрлА ркорк╛ркЯрлЗ, ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркдркорк╛рк░рлА ркиркЬрлАркХркирлА ркХрлГрк╖рк┐ ркУрклрк┐рк╕ ркЕркерк╡рк╛ рк╕ркдрлНркдрк╛рк╡рк╛рк░ рк╕рк░ркХрк╛рк░рлА рк╡рлЗркмрк╕рк╛ркЗркЯрлНрк╕ркирлА ркорлБрк▓рк╛ркХрк╛ркд рк▓рлЛред",
        "privacy": "ркдркорк╛рк░рлА рк╡рк╛ркдркЪрлАркдрлЛ ркХрк╛ркпркорлА рк░рлВрккрлЗ рк╕ркВркЧрлНрк░рк╣рк┐ркд ркеркдрлА ркиркерлА. рк╡рлЙркЗрк╕ ркбрлЗркЯрк╛ рк╕рлБрк░ркХрлНрк╖рк┐ркд рк░рлАркдрлЗ рккрлНрк░ркХрлНрк░рк┐ркпрк╛ ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлЗ ркЫрлЗред"
    }
}

current_footer = footer_content.get(selected_lang_code, footer_content["en"])

st.markdown(f"""
    <div class="footer">
        <h4 style="margin-bottom: 1rem; color: white;">{current_footer["title"]}</h4>
        <p style="margin-bottom: 0.8rem; font-size: 1rem;">{current_footer["description"]}</p>
        <p style="margin-bottom: 0.8rem; font-size: 0.9rem;"><strong>{current_footer["schemes"]}</strong></p>
        <p style="margin-bottom: 0.8rem; font-size: 0.9rem;">{current_footer["languages"]}</p>
        <hr style="margin: 1rem 0; border: 1px solid rgba(255,255,255,0.3);">
        <p style="margin-bottom: 0.5rem; font-size: 0.8rem; font-style: italic;">{current_footer["disclaimer"]}</p>
        <p style="margin-bottom: 0; font-size: 0.8rem; font-style: italic;">{current_footer["privacy"]}</p>
    </div>
""", unsafe_allow_html=True)